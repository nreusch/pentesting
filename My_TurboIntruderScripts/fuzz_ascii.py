from random import choice

#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#
#------------MAKE YOUR CHANGES JUST HERE---------------------------------------------------------

# Do you want random characters, or generate them in order?
random = False

# The following variables should be adjusted before starting the attack.
how_many_attacks            = 255    # How many attacks do you want to launch

# The variables "stringlength_min" and "stringlength_max" defines the minimum and maximum length of the 
# generated strings. If both are at the same size, the size of the character string would remain constant.
stringlength_min            = 1   # Minimum length of the character string
stringlength_max            = 1   # Maximum length of the character string

# The variable "number_of_markers" contains the number of markers you have set (%s in request).
number_of_markers           = 4

# By default, the program assumes that it should generate ASCII characters between 48 (ASCII_start) and 
# 122 (ASCII_end). Below is a list of the most popular settings for the value pair ASCII_start and ASCII_end
# Lower case only             : ASCII_start = 97 ASCII_end = 122
# Uppercase only              : ASCII_start = 65 ASCII_end = 90
# Digits only                 : ASCII_start = 48 ASCII_end = 57
# Lower- + uppercase + digits : ASCII_start = 48 ASCII_end = 122
# On the other hand, if you really want to create real chaos, set "ASCII_start = 1" and "ASCII_end = 255" and 
# set "exclude_characters_flag = False".
ASCII_start                 = 1 # These two variables defines the area of the ASCII table
ASCII_end                   = 255    # from which the random values are generated.

# These characters can optional removed from the ASCII list. It make sense to set "exclude_characters_flag"
# to True if you want only small and capital letters and numbers. (chr(92) == backslash). If you want to 
# add more items to the list, go ahead. You see how it works.
# The setting lowercase + uppercase + digits includes the following characters:
# 0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz
# The special characters in the list are annoying. This is especially true when manipulating "get statements"
# (GET /index.php?search=%s HTTP/1.1). As a result, you can remove them from the list by setting the variable 
# exclude_characters_flag = True.
exclude_characters         = [':', ';', '<', '=', '>', '?', '@', '^', '_', '`', chr(92), '[', ']']
exclude_characters_flag    = False

# This exchange is necessary so that the stringlength value remains constant at the set value and the length
# isn't changed
ampersand                  = False  # False = The generator ignores the ampersand and returns use_instead
questionmark               = False  # False = The generator ignores the question mark and returns use_instead
use_instead                = 59     # ASCII value 59 == semicolon

# These characters can optional added to the ASCII list. If you want to add own signs to the list, go ahead. 
# You see how it works.
include_characters         = ['!', '$', '%', '@']
include_characters_flag    = True

# If you want to filtered out duplicate entries of the ASCII list and that the ASCII list is sorted, set the
# variable "clean_the_list" to True.
clean_the_list             = False

#------------END OF CONTROLS---------------------------------------------------------------------
#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#


def queueRequests(target, wordlists):
    engine = RequestEngine(endpoint=target.endpoint,
                           concurrentConnections=5,
                           requestsPerConnection=100,
                           pipeline=False
                           )
    stringlength = 0
    # The following list will contains all the elements of the ASCII list that are to be used
    ASCII_list = []
    ASCII_list = generate_ascii_list(ASCII_list)
    # List, which contains the random strings
    words_of_attack = []
    # The attack runs until the value, stored in how_many_attacks, is reached
    for attack_number in range(0, how_many_attacks):
        # In jython the function "clear()" does not exists , so I've done a workaround
        # to clear the list after each for statement 
        words_of_attack[:] = []
        # Fill the lists with the random stringlists
        if stringlength_min < stringlength_max:
            stringlength = stringlength_min + attack_number
        else:
            stringlength = stringlength_max 
        # counter is nothing else as a counter and not use for other functions
        for counter in range(0,number_of_markers):
            if random:
                words_of_attack.append(generate_random_chars(ASCII_list, stringlength))
            else:
                words_of_attack.append(generate_chars_in_order(attack_number, ASCII_list, stringlength))
        engine.queue(target.req, words_of_attack)


# Sets the ASCII range from which the random values are generated
def generate_ascii_list(ASCII_list):
    for counter in range(ASCII_start, ASCII_end + 1):
        ASCII_list.append(counter)
    # Remove some characters from the ASCII_list
    if exclude_characters_flag == True:
        for character in exclude_characters:
            ASCII_list.remove(ord(character))
    # Add some characters to the ASCII_list
    if include_characters_flag == True:
        for character in include_characters:
            ASCII_list.append(ord(character))
    # If you want to clean the list
    if clean_the_list == True:
        # Removed duplicate entries
        ASCII_list = list(set(ASCII_list))
        # List sort
        ASCII_list.sort()
    return ASCII_list


# ASCII-character generator
def generate_randomnumber(ASCII_list):
    rnd_num = random.choice(ASCII_list)
    # If ampersand = False and the ASCII value of the
    # ampersand was chosen by the random generator... 
    if ampersand == False:
        if rnd_num == 38:
            rnd_num = use_instead
    # If questionmark = False and the ASCII value of the
    # question mark was chosen by the random generator... 
    if questionmark == False:
        if rnd_num == 63:
            # Replace it with the value use_instead
            rnd_num = use_instead
    return rnd_num

# The function generates an ASCII list with the random values and then returns them as a string
def generate_random_chars(ASCII_list, stringlength):
    charlist = []
    for x in range(0, stringlength):
        charlist.append(chr(generate_randomnumber(ASCII_list)))
    # Return a string instead of a list
    return ''.join(charlist)

    # The function generates an ASCII list with the random values and then returns them as a string
def generate_chars_in_order(counter, ASCII_list, stringlength):
    charlist = []
    for x in range(0, stringlength):
        charlist.append(chr(ASCII_list[counter]))
    # Return a string instead of a list
    return ''.join(charlist)


def handleResponse(req, interesting):
    # currently available attributes are req.status, req.wordcount, req.length and req.response
    if req.status != 404:
        table.add(req)